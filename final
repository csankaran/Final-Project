import java.util.*;
import java.awt.*;
import java.io.*;
public class CheckersGame {
	public static void main(String[] args) {
		DrawingPanel panel = new DrawingPanel(640, 640);
		Graphics g = panel.getGraphics();
		CheckersBoard game = new CheckersBoard();
		printBoard(g, game);
		while (!gameOver(game)) {
		    getNextMove(panel, game);
		    printBoard(g, game);
		}
		System.out.println("The winner is " + winnerIs(game));
	}
	
	public static void printBoard(Graphics g, CheckersBoard game) {
		for(int i = 0; i < 8; i++){
			for(int j = 0; j < 8; j++){
				if(i%2 == j%2){
					g.setColor(Color.BLACK);
					g.fillRect(i*80, j*80, 80, 80);
				}
				else{
					g.setColor(Color.WHITE);
					g.fillRect(i*80, j*80, 80, 80);
				}
			}
		}
		
		for(int i = 0; i < 8; i++){
			for(int j = 0; j < 8; j++){
				if(game.board[i][j].getColor() == 1){
					g.setColor(Color.RED);
					g.fillOval(i*80 + 10, j*80+ 10, 60, 60);
					if(game.board[i][j].getKing()){
						g.setColor(Color.YELLOW);
						g.drawOval(i*80 + 10, j*80+ 10, 60, 60);
					}
				}else if(game.board[i][j].getColor() == 2){
					g.setColor(Color.BLUE);
					g.fillOval(i*80 + 10, j*80+ 10, 60, 60);
					if(game.board[i][j].getKing()){
						g.setColor(Color.YELLOW);
						g.drawOval(i*80 + 10, j*80+ 10, 60, 60);
					}
				}
			}
		}
	}
	
	public static void getNextMove(DrawingPanel panel, CheckersBoard game){
		boolean moved = false;
		while (!moved) {
			panel.setClick();
			int startX = panel.getClickX();
			int startY = panel.getClickY();
			while(startX == -1){   
				startX = panel.getClickX();
				startY = panel.getClickY();
			}
			panel.setClick();
			int endX = panel.getClickX();
			int endY = panel.getClickY();
			while(endX == -1){
				endX = panel.getClickX();
				endY = panel.getClickY();
			}
			panel.setClick();
			startX = startX/80;
			startY = startY/80;
			endX = endX/80;
			endY = endY/80;
			System.out.println("(" + startX + "," + startY + ") > (" + endX + "," + endY + ")");
			if (validMove(startX, startY, endX, endY, game)) {
				executeMove(startX, startY, endX, endY, game);
				moved = true;
			}else
				System.out.println("That was an invalid move, try again.");
		}
		if (game.whosemove == true)
			game.whosemove = false;
		else
			game.whosemove = true;
	 }
	 
	 public static boolean validMove(int xfrom, int yfrom, int xto, int yto, CheckersBoard game){
		int check;
		if(game.whosemove)
			check = 1;
		else
			check = 2;
		if(game.board[xfrom][yfrom].getColor() == check && game.board[xto][yto].getColor() == 0 && game.board[xfrom][yfrom].getKing()){
			if (Math.abs(xfrom-xto)==1) {
				if ((game.whosemove == true) && (yto - yfrom == -1))
				    return true;
				else if ((game.whosemove == false) && (yto - yfrom == 1))
				    return true;
				else if ((game.whosemove == true) && (yto - yfrom == 1))
				    return true;
				else if ((game.whosemove == false) && (yto - yfrom == -1))
				    return true;
			}
			else if (Math.abs(xfrom-xto)==2) {
				if (game.whosemove == true && (yto - yfrom == -2) && 
						game.board[(xfrom+xto)/2][(yfrom+yto)/2].getColor() == 2)
				    return true;
				else if (game.whosemove == false && (yto - yfrom == 2) && 
						game.board[(xfrom+xto)/2][(yfrom+yto)/2].getColor() == 1)
				    return true;
				else if (game.whosemove == true && (yto - yfrom == 2) && 
						game.board[(xfrom+xto)/2][(yfrom+yto)/2].getColor() == 2)
					    return true;
				else if (game.whosemove == false && (yto - yfrom == -2) && 
						game.board[(xfrom+xto)/2][(yfrom+yto)/2].getColor() == 1)
					    return true;
			}
			
		}
		else if (game.board[xfrom][yfrom].getColor() == check && game.board[xto][yto].getColor() == 0) {
			if (Math.abs(xfrom-xto)==1) {
				if ((game.whosemove == true) && (yto - yfrom == 1))
				    return true;
				else if ((game.whosemove == false) && (yto - yfrom == -1))
				    return true;
			}
			else if (Math.abs(xfrom-xto)==2) {
				if (game.whosemove == true && (yto - yfrom == 2) && 
				    game.board[(xfrom+xto)/2][(yfrom+yto)/2].getColor() == 2)
				    return true;
				else if (game.whosemove == false && (yto - yfrom == -2) && 
				    game.board[(xfrom+xto)/2][(yfrom+yto)/2].getColor() == 1)
				    return true;
			}
		}
		return false;
	 }
	 
	 public static void executeMove(int xfrom, int yfrom, int xto, int yto, CheckersBoard game) {
		int check;
		if(game.whosemove)
			check = 1;
		else
			check = 2;
		if(game.board[xfrom][yfrom].getKing()){
			game.board[xfrom][yfrom].setKing(false);
			game.board[xto][yto].setKing(true);
		}
		game.board[xfrom][yfrom].setColor(0);
		game.board[xto][yto].setColor(check);
		if((check == 1 && yto == 7) || (check == 2 && yto == 0)){
			game.board[xto][yto].setKing(true);
		}
		if (Math.abs(xto - xfrom) == 2) {
			game.board[(xfrom+xto)/2][(yfrom+yto)/2].setColor(0);
			if (game.whosemove == true)
				game.redcheckers--;
			else
			    game.blackcheckers--;
		}
	 }
	 
	 public static boolean gameOver(CheckersBoard game) {
			return (game.redcheckers == 0 || game.blackcheckers == 0);
		    }

	 public static String winnerIs(CheckersBoard game) {
		if (game.blackcheckers == 0)
			return "blue";
		else
			return "red";
		}
}









public class checkersPiece 
{
	private boolean king = false;
	private int color;
	
	checkersPiece(int color)
	{
		this.color = color;
	}
	
	public int getColor(){
		return color;
	}
	public void setColor(int color){
		this.color = color;
	}
	public boolean getKing(){
		return king;
	}
	public void setKing(boolean king){
		this.king = king;
	}
}









import java.util.*;
import java.io.*;

public class CheckersBoard {
	
	public checkersPiece[][] board; 
	public int redcheckers; 
	public int blackcheckers; 
	public boolean whosemove; 

	public CheckersBoard() {
		
		board = new checkersPiece[8][8];
	    redcheckers = 12;
	    blackcheckers = 12;
	    whosemove = true;
	    
	    for (int i = 0; i < 8; i++)
	    	for (int j = 0; j < 8; j++)
	    		board[i][j] = new checkersPiece(0);
	    
	    for (int i = 1; i < 8; i+=2){
	    	board[i][1] = new checkersPiece(1);
	    	board[i][5] = new checkersPiece(2);
	    	board[i][7] = new checkersPiece(2);
	    }
	    
	    for (int i = 0; i < 8; i+=2) {
	    	board[i][0] = new checkersPiece(1);
	    	board[i][2] = new checkersPiece(1);
	    	board[i][6] = new checkersPiece(2);
	    }
	}
}









import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.ArrayList;

public class DrawingPanel implements ActionListener {
 private static final String versionMessage = 
    "Drawing Panel version 1.1, January 25, 2015";
 private static final int DELAY = 100;  // delay between repaints in millis
 private static final boolean PRETTY = false;  // true to anti-alias
 private static boolean showStatus = false;
 private static final int MAX_KEY_BUF_SIZE = 10;
 
 private int width, height;    // dimensions of window frame
 private JFrame frame;         // overall window frame
 private JPanel panel;         // overall drawing surface
 private BufferedImage image;  // remembers drawing commands
 private Graphics2D g2;        // graphics context for painting
 private JLabel statusBar;     // status bar showing mouse position
 private volatile MouseEvent click;     // stores the last mouse click
 private volatile boolean pressed;      // true if the mouse is pressed
 private volatile MouseEvent move;      // stores the position of the mouse
 private ArrayList<KeyInfo> keys;
 
 // construct a drawing panel of given width and height enclosed in a window
 public DrawingPanel(int width, int height) {
   this.width = width;
   this.height = height;
   keys = new ArrayList<KeyInfo>();
   image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
   
   statusBar = new JLabel(" ");
   statusBar.setBorder(BorderFactory.createLineBorder(Color.BLACK));
   statusBar.setText(versionMessage);
   
   panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));
   panel.setBackground(Color.WHITE);
   panel.setPreferredSize(new Dimension(width, height));
   panel.add(new JLabel(new ImageIcon(image)));
   
   click = null;
   move = null;
   pressed = false;
   
   // listen to mouse movement
   MouseInputAdapter listener = new MouseInputAdapter() {
     public void mouseMoved(MouseEvent e) {
       pressed = false;
       move = e;
       if (showStatus)
          statusBar.setText("moved (" + e.getX() + ", " + e.getY() + ")");
     }
 
     public void mousePressed(MouseEvent e) {
       pressed = true;
       move = e;
       if (showStatus)
          statusBar.setText("pressed (" + e.getX() + ", " + e.getY() + ")");
       
     }
     
     public void mouseDragged(MouseEvent e) {
       pressed = true;
       move = e;
       if (showStatus)
          statusBar.setText("dragged (" + e.getX() + ", " + e.getY() + ")");
     }
     
     public void mouseReleased(MouseEvent e) {
       click = e;
       pressed = false;
       if (showStatus)
          statusBar.setText("released (" + e.getX() + ", " + e.getY() + ")");
     }
     
     public void mouseEntered(MouseEvent e) {
//       System.out.println("mouse entered");
       panel.requestFocus();
     }
     
   };
   panel.addMouseListener(listener);
   panel.addMouseMotionListener(listener);
   new DrawingPanelKeyListener();
   
   g2 = (Graphics2D)image.getGraphics();
   g2.setColor(Color.BLACK);
   if (PRETTY) {
     g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
     g2.setStroke(new BasicStroke(1.1f));
   }
   
   frame = new JFrame("Drawing Panel");
   frame.setResizable(false);
   try {
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // so that this works in an applet
   } catch (Exception e) {}
   frame.getContentPane().add(panel);
   frame.getContentPane().add(statusBar, "South");
   frame.pack();
   frame.setVisible(true);
   toFront();
   frame.requestFocus();
   
   // repaint timer so that the screen will update
   new Timer(DELAY, this).start();
 }
 
 public void showMouseStatus(boolean f) {
   showStatus = f;
 }
 
 public void addKeyListener(KeyListener listener) {
   panel.addKeyListener(listener);
   panel.requestFocus();
 }
 
 // used for an internal timer that keeps repainting
 public void actionPerformed(ActionEvent e) {
   panel.repaint();
 }
 
 // obtain the Graphics object to draw on the panel
 public Graphics2D getGraphics() {
   return g2;
 }
 
 // set the background color of the drawing panel
 public void setBackground(Color c) {
   panel.setBackground(c);
 }
 
 // show or hide the drawing panel on the screen
 public void setVisible(boolean visible) {
   frame.setVisible(visible);
 }
 
 // makes the program pause for the given amount of time,
 // allowing for animation
 public void sleep(int millis) {
   panel.repaint();
   try {
     Thread.sleep(millis);
   } catch (InterruptedException e) {}
 }
 
 // close the drawing panel
 public void close() {
   frame.dispose();
 }
 
 // makes drawing panel become the frontmost window on the screen
 public void toFront() {
   frame.toFront();
 }

 // return panel width
 public int getWidth() {
    return width;
 }

 // return panel height
 public int getHeight() {
    return height;
 }
 
 // return the X position of the mouse or -1
 public int getMouseX() {
   if (move == null) {
     return -1;
   } else {
     return move.getX();
   }
 }
 
 // return the Y position of the mouse or -1
 public int getMouseY() {
   if (move == null) {
     return -1;
   } else {
     return move.getY();
   }
 }
 
 // return the X position of the last click or -1
 public int getClickX() {
   if (click == null) {
     return -1;
   } else {
     return click.getX();
   }
 }
 public void setClick(){
	 click = null;
 }
 // return the Y position of the last click or -1
 public int getClickY() {

   if (click == null) {
     return -1;
   } else {
     return click.getY();
   }
 }
 
 // return true if a mouse button is pressed
 public boolean mousePressed() {
   return pressed;
 }
 
 public synchronized int getKeyCode() {
   if (keys.size() == 0)
     return 0;
   return keys.remove(0).keyCode;
 }
 
  public synchronized char getKeyChar() {
   if (keys.size() == 0)
     return 0;
   return keys.remove(0).keyChar;
 }
  
  public synchronized int getKeysSize() {
    return keys.size();
  }
 
 private synchronized void insertKeyData(char c, int code) {
   keys.add(new KeyInfo(c,code));
   if (keys.size() > MAX_KEY_BUF_SIZE) {
     keys.remove(0);
//     System.out.println("Dropped key");
   }
 }
 
 private class KeyInfo {
   public int keyCode;
   public char keyChar;
   
   public KeyInfo(char keyChar, int keyCode) {
     this.keyCode = keyCode;
     this.keyChar = keyChar;
   }
 }
 
 private class DrawingPanelKeyListener implements KeyListener {
   
   int repeatCount = 0;
   
   public DrawingPanelKeyListener() {
     panel.addKeyListener(this);
     panel.requestFocus();
   }
   
   public void keyPressed(KeyEvent event) {
//     System.out.println("key pressed");
     repeatCount++;
     if ((repeatCount == 1) || (getKeysSize() < 2))
        insertKeyData(event.getKeyChar(),event.getKeyCode());
   }
   
   public void keyTyped(KeyEvent event) {
   }
   
   public void keyReleased(KeyEvent event) {
     repeatCount = 0;
   }
   
 }
 
}
